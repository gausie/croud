"use strict";function convertDateStringsToDates(input){if("object"!=typeof input)return input;for(var key in input)if(input.hasOwnProperty(key)){var match,value=input[key];if("string"==typeof value&&(match=value.match(regexIso8601))){var milliseconds=Date.parse(match[0]);isNaN(milliseconds)||(input[key]=new Date(milliseconds))}else"object"==typeof value&&convertDateStringsToDates(value)}}var ApplicationConfiguration=function(){var applicationModuleName="croud",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ngCachedResource","ui.router","ui.bootstrap","ui.utils","ui.select","leaflet-directive","angularMoment","ngFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]);var regexIso8601=/^(\d{4}|\+\d{6})(?:-(\d{2})(?:-(\d{2})(?:T(\d{2}):(\d{2}):(\d{2})\.(\d{1,})(Z|([\-+])(\d{2}):(\d{2}))?)?)?)?$/;angular.module(ApplicationConfiguration.applicationModuleName).config(["$httpProvider",function($httpProvider){$httpProvider.defaults.transformResponse.push(function(responseData){return convertDateStringsToDates(responseData),responseData})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("campaigns"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("points",["campaigns"]),ApplicationConfiguration.registerModule("users"),angular.module("campaigns").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Campaigns","campaigns","dropdown","/campaigns(/create)?"),Menus.addSubMenuItem("topbar","campaigns","View Campaigns","campaigns"),Menus.addSubMenuItem("topbar","campaigns","Create Campaign","campaigns/create")}]),angular.module("campaigns").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCampaigns",{url:"/campaigns",templateUrl:"modules/campaigns/views/list-campaigns.client.view.html"}).state("createCampaign",{url:"/campaigns/create",templateUrl:"modules/campaigns/views/create-campaign.client.view.html"}).state("viewCampaign",{url:"/campaigns/:campaignId",templateUrl:"modules/campaigns/views/view-campaign.client.view.html"}).state("editCampaign",{url:"/campaigns/:campaignId/edit",templateUrl:"modules/campaigns/views/edit-campaign.client.view.html"})}]),angular.module("campaigns").controller("CampaignsController",["$scope","$stateParams","$location","$http","Authentication","Campaigns","Points","Users","leafletData","moment",function($scope,$stateParams,$location,$http,Authentication,Campaigns,Points,Users,leafletData,moment){$scope.authentication=Authentication,$scope.campaign={},$scope.center={},$scope.now=new Date,$scope.openCalendar=function($event,field){$event.preventDefault(),$event.stopPropagation(),$scope.openedCalendar={},$scope.openedCalendar[field]=!0},$scope.daysSince=function(date){return date?moment().diff(moment(date),"days"):!1},$scope.fieldTypes=[{key:"text",value:"Text"},{key:"number",value:"Number"},{key:"select",value:"Multiple Choice"},{key:"boolean",value:"Boolean"},{key:"image",value:"Image"}],$scope.loadIcons=function(){$http.get("modules/core/data/fontAwesomeIcons.json").then(function(res){$scope.icons=res.data.icons})},$scope.addOption=function(field){void 0===$scope.campaign.fields[field].options&&($scope.campaign.fields[field].options=[]),$scope.campaign.fields[field].options.push({name:"",icon:null})},$scope.removeOption=function(field,index){$scope.campaign.fields[field].options.splice(index,1)},$scope.addField=function(){void 0===$scope.campaign.fields&&($scope.campaign.fields=[]),$scope.campaign.fields.push({name:"",type:null,required:!1})},$scope.removeField=function(index){$scope.campaign.fields.splice(index,1)},$scope.create=function(){if(!this.campaign.name)return void($scope.error="Campaign name is required.");if(!this.campaign.location)return void($scope.error="Location is required");var campaign=new Campaigns({name:this.campaign.name,description:this.campaign.description,location:this.campaign.location,fields:this.campaign.fields,start:this.campaign.start,end:this.campaign.end,approvalRequired:this.campaign.approvalRequired,"private":this.campaign["private"],fieldAsMarker:this.campaign.fieldAsMarker,stale:this.campaign.stale});campaign.$save(function(response){$location.path("campaigns/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(campaign){if(campaign){campaign.$remove();for(var i in $scope.campaigns)$scope.campaigns[i]===campaign&&$scope.campaigns.splice(i,1)}else $scope.campaign.$remove(function(){$location.path("campaigns")})},$scope.update=function(){var campaign=$scope.campaign;campaign.$update(function(){$location.path("campaigns/"+campaign._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.campaigns=Campaigns.query()},$scope.findJoined=function(){$scope.joinedCampaigns=$scope.authentication?Campaigns.query({mine:!0,includeClosed:!0}):[]},$scope.findOne=function(){$scope.campaign=Campaigns.get({campaignId:$stateParams.campaignId},function(){$scope.center=$scope.campaign.location,$scope.$watch("authentication.user",function(user){$scope.controls=user?user._id===$scope.campaign.user._id?"owner":user.memberships.indexOf($scope.campaign._id)>-1?"member":"user":"none"})})},$scope.users=[],$scope.refreshUsers=function(name){$scope.users=Users.query({q:name})},$scope.toggleJoin=function(){var user=new Users($scope.campaign.userToInvite||Authentication.user);user.memberships.indexOf($scope.campaign._id)>-1?$scope.leave():$scope.join()},$scope.join=function(){var user=new Users($scope.campaign.userToInvite||Authentication.user);user.$join({campaignId:$scope.campaign._id},function(response){$scope.campaign.userToInvite||($scope.authentication.user=response)})},$scope.leave=function(){var user=new Users($scope.campaign.userToInvite||Authentication.user);user.$leave({campaignId:$scope.campaign._id},function(response){$scope.campaign.userToInvite||($scope.authentication.user=response)})},$scope.findPoints=function(){$scope.$on("leafletDirectiveMarker.click",function(e,args){$location.path("points/"+args.modelName)}),$scope.$on("leafletDirectiveMap.moveend",function(){leafletData.getMap().then(function(map){var bounds=map.getBounds();Points.query({campaign:$stateParams.campaignId,bounds:bounds.toBBoxString()},function(points){var markers={};points.forEach(function(point){var className=$scope.campaign.fieldAsMarker&&point.data&&point.data[$scope.campaign.fieldAsMarker]?"fa fa-"+point.data[$scope.campaign.fieldAsMarker].icon:"icon";if($scope.campaign.stale){var age=$scope.daysSince(point.created);age>=$scope.campaign.stale&&(className+=" stale")}var marker=angular.extend({},point.location,{icon:{type:"div",iconSize:[10,10],className:className,iconAnchor:[5,5]}});markers[point._id]=marker}),$scope.markers=markers})})})}}]),angular.module("campaigns").factory("Campaigns",["$cachedResource",function($cachedResource){return $cachedResource("campaigns","campaigns/:campaignId",{campaignId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.$state=$state,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("locationPicker",[function(){return{templateUrl:"modules/core/views/location-picker.client.view.html",restrict:"E",scope:{defaultCenter:"=?",location:"=",staticGetter:"&static"},controller:["$scope","leafletData",function($scope,leafletData){var defaultCenter={lat:40.87,lng:34.57,zoom:1};$scope.defaultCenter=$scope.defaultCenter?angular.extend({},defaultCenter,$scope.defaultCenter):defaultCenter,$scope["static"]=$scope.staticGetter()||!1,$scope.center=$scope.defaultCenter,$scope.resetMap=function(){leafletData.getMap().then(function(map){map.invalidateSize()})},$scope.moveMarker=function(coords){var marker={lat:coords.lat,lng:coords.lng};!$scope.markers||$scope.markers.length<1?$scope.markers=[marker]:$scope.markers[0]=marker},$scope.dropPin=function(){leafletData.getMap().then(function(map){map.locate({setView:!0}).on("locationfound",function(e){$scope["static"]||($scope.location={lng:e.longitude,lat:e.latitude,zoom:$scope.center.zoom})})})}}],link:function($scope){$scope.$watch("location",function(v){v?($scope.moveMarker(v),$scope.center=v):($scope.markers=[],$scope.center=$scope.defaultCenter)},!0),$scope.$on("leafletDirectiveMap.click",function(event,args){if(!$scope["static"]){var coords=args.leafletEvent.latlng.wrap(),obj={lat:coords.lat,lng:coords.lng,zoom:$scope.center.zoom};$scope.location?angular.extend($scope.location,obj):$scope.location=obj}}),$scope.resetMap(),$scope.$on("resetMap",$scope.resetMap)}}}]),angular.module("core").filter("mongogeo",[function(){return function(input,direction){return input?"in"===direction?[input.lng,input.lat]:(console.dir(input),{lng:input[0],lat:input[1]}):void 0}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("points").run(["Menus",function(Menus){Menus.addMenuItem("topbar",'<i class="fa fa-map-marker"></i> Add a point!',"createPoint","button",void 0,void 0,void 0,-1)}]),angular.module("points").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPoints",{url:"/points",templateUrl:"modules/points/views/list-points.client.view.html"}).state("createPoint",{url:"/points/create",templateUrl:"modules/points/views/create-point.client.view.html"}).state("viewPoint",{url:"/points/:pointId",templateUrl:"modules/points/views/view-point.client.view.html"}).state("editPoint",{url:"/points/:pointId/edit",templateUrl:"modules/points/views/edit-point.client.view.html"}).state("listUserPoints",{url:"/users/:userId/points",templateUrl:"modules/points/views/list-points.client.view.html"})}]),angular.module("points").controller("PointsController",["$scope","$stateParams","$location","Upload","Authentication","Points","Campaigns","moment",function($scope,$stateParams,$location,Upload,Authentication,Points,Campaigns,moment){$scope.authentication=Authentication,$scope.point={},$scope.daysSince=function(date){return date?moment().diff(moment(date),"days"):!1},$scope.create=function(){var self=this,errors=[];this.point.location||errors.push("You must specify a location.");var files=[];if(this.point.campaign.fields&&this.point.campaign.fields.forEach(function(field){if(field.required&&(void 0===self.point.data||void 0===self.point.data[field.name]||""===self.point.data[field.name])&&errors.push('"'+field.name+'" is a required field.'),"image"===field.type){var file=self.point.data[field.name][0],ext=file.name.split(".").pop();files.push({name:field.name,file:file}),self.point.data[field.name]=ext}}),errors.length>0)return void($scope.errors=errors);var point=new Points({campaign:this.point.campaign._id,location:this.point.location,data:this.point.data});point.$save(function(){files.forEach(function(file){Upload.upload({url:"points/"+point._id+"/upload",file:file.file,fields:{name:file.name}})}),$location.path("points/create"),$scope.point={},$scope.$broadcast("resetMap")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.$watch("campaign",function(){$scope.$broadcast("resetMap")}),$scope.remove=function(point){if(point){point.$remove();for(var i in $scope.points)$scope.points[i]===point&&$scope.points.splice(i,1)}else $scope.point.$remove(function(){$location.path("points")})},$scope.update=function(){var point=$scope.point;point.$update(function(){$location.path("points/"+point._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.points=Points.query({user:$stateParams.userId},function(){$stateParams.userId&&($scope.name=$stateParams.userId===$scope.authentication.user._id?"My":$scope.points[0].user.displayName+"'s")})},$scope.findOne=function(){$scope.point=Points.get({pointId:$stateParams.pointId},function(){$scope.location=angular.extend({},$scope.point.location,{zoom:$scope.point.campaign.location.zoom})})},$scope.findCampaigns=function(){$scope.campaigns=Campaigns.query({mine:!0})}}]),angular.module("points").filter("sanitizeFilename",[function(){return function(input){function sanitize(input,replacement){return input.replace(illegalRe,replacement).replace(controlRe,replacement).replace(reservedRe,replacement).replace(windowsReservedRe,replacement)}var illegalRe=/[\/\?<>\\:\*\|":]/g,controlRe=/[\x00-\x1f\x80-\x9f]/g,reservedRe=/^\.+$/,windowsReservedRe=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;return sanitize(input,"")}}]),angular.module("points").factory("Points",["$cachedResource",function($cachedResource){return $cachedResource("points","points/:pointId",{pointId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider","$stateProvider",function($httpProvider,$stateProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}]),$stateProvider.state("viewUser",{url:"/users/:userId",templateUrl:"modules/users/views/view-user.client.view.html"})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$cachedResource",function($cachedResource){return $cachedResource("users","users",{userId:"@_id"},{update:{method:"PUT"},join:{method:"PUT",url:"users/:userId/memberships/:campaignId"},leave:{method:"DELETE",url:"users/:userId/memberships/:campaignId"}})}]);